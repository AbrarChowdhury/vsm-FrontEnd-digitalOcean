[{"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\patient\\patient.component.jsx":"1","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\deleteButton\\deleteButton.jsx":"2","D:\\Work\\BioForge\\vsm-front-end\\src\\index.js":"3","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\index.js":"4","D:\\Work\\BioForge\\vsm-front-end\\src\\App.js":"5","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\cards.component.jsx":"6","D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\dashboard\\dashboard.js":"7","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\patient\\updatePatientForm.component.jsx":"8","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\card\\card.component.jsx":"9","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\chart\\chart.component.jsx":"10"},{"size":6973,"mtime":1610526658442,"results":"11","hashOfConfig":"12"},{"size":381,"mtime":1610342729174,"results":"13","hashOfConfig":"12"},{"size":517,"mtime":1610342729179,"results":"14","hashOfConfig":"12"},{"size":209,"mtime":1610344097957,"results":"15","hashOfConfig":"12"},{"size":1100,"mtime":1610524064060,"results":"16","hashOfConfig":"12"},{"size":1768,"mtime":1610435911256,"results":"17","hashOfConfig":"12"},{"size":381,"mtime":1610345200628,"results":"18","hashOfConfig":"12"},{"size":1278,"mtime":1610439217559,"results":"19","hashOfConfig":"12"},{"size":1601,"mtime":1610524151854,"results":"20","hashOfConfig":"12"},{"size":847,"mtime":1610524776195,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"1cxrmgn",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\patient\\patient.component.jsx",["45","46","47","48","49","50","51","52","53","54","55","56","57"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport UpdatePatientForm from './updatePatientForm.component'\r\nimport io from \"socket.io-client\";\r\nimport DeleteButton from \"../deleteButton/deleteButton\"\r\nimport './patient.styles.scss'\r\nimport Chart from '../chart/chart.component'\r\nimport axios from 'axios'\r\nimport Navbar from '../NavBar/Navbar'\r\nimport { Typography } from '@material-ui/core'\r\nimport Icon from '@material-ui/core/Icon'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button'\r\nimport Edit from '@material-ui/icons/Edit'\r\n\r\nconst ENDPOINT = 'http://localhost:5000/';\r\nlet socket;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n\r\n    },\r\n    chartBox: {\r\n        margin: '20px 20px 0px 20px',\r\n        // paddingBottom: '40px',\r\n        background: '#0A081A',\r\n        maxHeight: '784px'\r\n    },\r\n    textHeader: {\r\n        color: '#64D7EB'\r\n    },\r\n    textHeader1: {\r\n        margin: '0px 80px 00px 00px',\r\n\r\n    },\r\n    textBody: {\r\n        color: '#FFFFFF'\r\n    },\r\n    chartText: {\r\n        // marginBottom:'50px',\r\n        padding: '40px'\r\n    },\r\n    chart: {\r\n        padding: '20px 40px 40px 40px'\r\n    },\r\n    button: {\r\n        backgroundColor: \"#FFFFFF\"\r\n    }\r\n\r\n\r\n\r\n})\r\n\r\n)\r\n\r\nfunction Patient() {\r\n    const classes = useStyles()\r\n    let { bed } = useParams();\r\n    const [patient, setPatient] = useState({})\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [vsmData, setVsmData] = useState('')\r\n    const [redirectToUpdate, setRedirectToUpdate] = useState(false)\r\n\r\n\r\n    const handleChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        console.log(\"the value\", inputValue)\r\n        socket.emit('vsm', { inputValue })\r\n        setInputValue('')\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const result = await axios(\r\n            `${ENDPOINT}patient/${bed}`,\r\n        );\r\n        setPatient(result.data);\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        socket = io(ENDPOINT)\r\n        console.log('stateChanged')\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('message', (message) => {\r\n            console.log(message)\r\n        })\r\n    }, [])\r\n\r\n\r\n    // if (redirectToUpdate == true) {\r\n    //     return <Redirect to=`/${bed}/updatePatient` />\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.root}>\r\n                <Navbar></Navbar>\r\n\r\n\r\n                <div className={classes.chartBox}>\r\n\r\n                    <div className={classes.chartText}>\r\n                        <Grid container xl={12}>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Bed No: </Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{patient.bed}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Patient Name:</Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{patient.name}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Age:</Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{patient.age}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Sex:</Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{patient.sex}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Temp:</Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{patient.sex}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Admission-date:</Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{\"22/11/2020\"}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Diagnosis:</Typography>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                                <Link to={'/updatePatient/' + patient.bed}>\r\n                                    <Button variant=\"contained\" onClick={() => setRedirectToUpdate(true)} className={classes.button} endIcon={<Edit className={classes.textHeader} />}><Typography className={classes.textHeader}>Edit</Typography> </Button>\r\n                                </Link>\r\n                            </Grid>\r\n\r\n                            {/* <Grid item xs={6}>\r\n                            <UpdatePatientForm name={patient.name} age={patient.age} sex={patient.sex} bed={patient.bed} />\r\n                        </Grid> */}\r\n                            {/* <Grid item xs={6}>\r\n                            <DeleteButton bed={bed} />\r\n                        </Grid> */}\r\n                            {/* <Grid item xs={6}>\r\n                            <Typography variant=\"h5\" className={classes.text}>Admission-date: {\"22/12/2020\"}</Typography>\r\n                        </Grid> */}\r\n\r\n                        </Grid>\r\n                    </div>\r\n\r\n                    <div className={classes.chart}>\r\n                        <Grid container xl={12}>\r\n\r\n                            <Grid item xl={10}>\r\n                                <Chart />\r\n                                <Typography variant=\"h6\" style={{paddingTop:'30px',paddingBottom:\"30px\"}}className={classes.textHeader} >PLETH</Typography>\r\n                                <Chart />\r\n                            </Grid>\r\n                            <Grid container item xl={2}>\r\n                                <Typography color=\"primary\">Hello</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Patient\r\n","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\deleteButton\\deleteButton.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\index.js",[],["58","59"],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\index.js",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\App.js",["60","61"],"import { Patient } from './components';\r\nimport Dashboard from './pages/dashboard/dashboard'\r\nimport LandingPage from './pages/landingPage/landingPage.component'\r\nimport AddPatientForm from './components/patient/addPatientForm.component'\r\nimport UpdatePatient from './components/patient/updatePatientForm.component'\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <div>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <LandingPage />\r\n            </Route>\r\n            <Route exact path=\"/dashboard\">\r\n              <Dashboard />\r\n            </Route>\r\n            <Route exact path=\"/add-patient\">\r\n              <AddPatientForm />\r\n            </Route>\r\n            <Route exact path=\"/:bed\" children={<Patient />}>\r\n            </Route>\r\n            <Route exact path=\"/updatePatient/:bed\" children={<UpdatePatient />}>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\cards.component.jsx",["62","63","64","65","66","67","68","69"],"D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\dashboard\\dashboard.js",["70"],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\patient\\updatePatientForm.component.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\card\\card.component.jsx",["71","72"],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\chart\\chart.component.jsx",[],{"ruleId":"73","severity":1,"message":"74","line":4,"column":10,"nodeType":"75","messageId":"76","endLine":4,"endColumn":22},{"ruleId":"73","severity":1,"message":"77","line":4,"column":36,"nodeType":"75","messageId":"76","endLine":4,"endColumn":41},{"ruleId":"73","severity":1,"message":"78","line":5,"column":8,"nodeType":"75","messageId":"76","endLine":5,"endColumn":25},{"ruleId":"73","severity":1,"message":"79","line":7,"column":8,"nodeType":"75","messageId":"76","endLine":7,"endColumn":20},{"ruleId":"73","severity":1,"message":"80","line":13,"column":8,"nodeType":"75","messageId":"76","endLine":13,"endColumn":12},{"ruleId":"73","severity":1,"message":"81","line":14,"column":10,"nodeType":"75","messageId":"76","endLine":14,"endColumn":18},{"ruleId":"73","severity":1,"message":"82","line":64,"column":12,"nodeType":"75","messageId":"76","endLine":64,"endColumn":19},{"ruleId":"73","severity":1,"message":"83","line":64,"column":21,"nodeType":"75","messageId":"76","endLine":64,"endColumn":31},{"ruleId":"73","severity":1,"message":"84","line":65,"column":12,"nodeType":"75","messageId":"76","endLine":65,"endColumn":28},{"ruleId":"73","severity":1,"message":"85","line":68,"column":11,"nodeType":"75","messageId":"76","endLine":68,"endColumn":23},{"ruleId":"73","severity":1,"message":"86","line":72,"column":11,"nodeType":"75","messageId":"76","endLine":72,"endColumn":23},{"ruleId":"87","severity":1,"message":"88","line":79,"column":5,"nodeType":"75","endLine":79,"endColumn":14,"suggestions":"89"},{"ruleId":"87","severity":1,"message":"90","line":79,"column":15,"nodeType":"91","endLine":85,"endColumn":6},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"73","severity":1,"message":"96","line":5,"column":8,"nodeType":"75","messageId":"76","endLine":5,"endColumn":20},{"ruleId":"97","severity":2,"message":"98","line":26,"column":64,"nodeType":"99","endLine":26,"endColumn":77},{"ruleId":"73","severity":1,"message":"100","line":2,"column":10,"nodeType":"75","messageId":"76","endLine":2,"endColumn":14},{"ruleId":"73","severity":1,"message":"74","line":3,"column":10,"nodeType":"75","messageId":"76","endLine":3,"endColumn":22},{"ruleId":"73","severity":1,"message":"77","line":3,"column":36,"nodeType":"75","messageId":"76","endLine":3,"endColumn":41},{"ruleId":"73","severity":1,"message":"101","line":25,"column":9,"nodeType":"75","messageId":"76","endLine":25,"endColumn":17},{"ruleId":"102","severity":1,"message":"103","line":43,"column":49,"nodeType":"91","messageId":"104","endLine":43,"endColumn":51},{"ruleId":"102","severity":1,"message":"103","line":44,"column":34,"nodeType":"91","messageId":"104","endLine":44,"endColumn":36},{"ruleId":"105","severity":1,"message":"106","line":46,"column":34,"nodeType":"107","messageId":"108","endLine":46,"endColumn":36},{"ruleId":"87","severity":1,"message":"109","line":58,"column":6,"nodeType":"110","endLine":58,"endColumn":8,"suggestions":"111"},{"ruleId":"73","severity":1,"message":"112","line":1,"column":10,"nodeType":"75","messageId":"76","endLine":1,"endColumn":14},{"ruleId":"73","severity":1,"message":"113","line":8,"column":18,"nodeType":"75","messageId":"76","endLine":8,"endColumn":25},{"ruleId":"87","severity":1,"message":"109","line":19,"column":8,"nodeType":"110","endLine":19,"endColumn":10,"suggestions":"114"},"no-unused-vars","'createStyles' is defined but never used.","Identifier","unusedVar","'Theme' is defined but never used.","'UpdatePatientForm' is defined but never used.","'DeleteButton' is defined but never used.","'Icon' is defined but never used.","'Redirect' is defined but never used.","'vsmData' is assigned a value but never used.","'setVsmData' is assigned a value but never used.","'redirectToUpdate' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setPatient'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [bed] as a second argument to the useEffect Hook.",["115"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-native-reassign",["116"],"no-negated-in-lhs",["117"],"'pdatePatient' is defined but never used.","react/jsx-no-undef","'UpdatePatient' is not defined.","JSXIdentifier","'Link' is defined but never used.","'onChange' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["118"],"'Card' is defined but never used.","'setData' is assigned a value but never used.",["119"],{"desc":"120","fix":"121"},"no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"122","fix":"124"},"Add dependencies array: [bed]",{"range":"125","text":"126"},"Update the dependencies array to be: [data]",{"range":"127","text":"128"},{"range":"129","text":"128"},[2197,2197],", [bed]",[1454,1456],"[data]",[481,483]]