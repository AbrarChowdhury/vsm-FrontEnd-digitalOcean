[{"D:\\Work\\BioForge\\vsm-front-end\\src\\index.js":"1","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\patient\\patient.component.jsx":"2","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\index.js":"3","D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\landingPage\\landingPage.component.jsx":"4","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\sign-In-form\\signInForm.component.jsx":"5","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\card\\card.component.jsx":"6","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\cards.component.jsx":"7","D:\\Work\\BioForge\\vsm-front-end\\src\\App.js":"8","D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\dashboard\\dashboard.js":"9","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\NavBar\\Navbar.js":"10","D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\addPatientForm\\addPatientForm.component.jsx":"11","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\deleteButton\\deleteButton.jsx":"12","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\updatePatientForm\\updatePatientForm.component.jsx":"13","D:\\Work\\BioForge\\vsm-front-end\\src\\reportWebVitals.js":"14"},{"size":517,"mtime":1610342729179,"results":"15","hashOfConfig":"16"},{"size":2945,"mtime":1610342729175,"results":"17","hashOfConfig":"16"},{"size":209,"mtime":1610344097957,"results":"18","hashOfConfig":"16"},{"size":241,"mtime":1610346468712,"results":"19","hashOfConfig":"16"},{"size":7071,"mtime":1610367830983,"results":"20","hashOfConfig":"16"},{"size":1417,"mtime":1610343931154,"results":"21","hashOfConfig":"16"},{"size":1329,"mtime":1610362766513,"results":"22","hashOfConfig":"16"},{"size":885,"mtime":1610344643761,"results":"23","hashOfConfig":"16"},{"size":381,"mtime":1610345200628,"results":"24","hashOfConfig":"16"},{"size":1357,"mtime":1610361600809,"results":"25","hashOfConfig":"16"},{"size":1420,"mtime":1610342729183,"results":"26","hashOfConfig":"16"},{"size":381,"mtime":1610342729174,"results":"27","hashOfConfig":"16"},{"size":1278,"mtime":1610342729178,"results":"28","hashOfConfig":"16"},{"size":375,"mtime":1610342729185,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1cxrmgn",{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Work\\BioForge\\vsm-front-end\\src\\index.js",[],["63","64"],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\patient\\patient.component.jsx",["65","66","67"],"import React, {useState, useEffect} from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport Grid from '@material-ui/core/Grid'\r\nimport UpdatePatientForm from '../updatePatientForm/updatePatientForm.component'\r\nimport io from \"socket.io-client\";\r\nimport DeleteButton from \"../deleteButton/deleteButton\"\r\nimport './patient.styles.scss'\r\nimport Chart from '../chart/chart.component'\r\nimport axios from 'axios'\r\n\r\nconst ENDPOINT = 'http://localhost:5000/';\r\nlet socket;\r\n\r\n\r\nfunction Patient() {\r\n    let { bed } = useParams();\r\n    const [patient, setPatient]=useState({})\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [vsmData, setVsmData] = useState('')\r\n    \r\n    \r\n    const handleChange = (e)=>{\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault() \r\n        console.log(\"the value\",inputValue)\r\n        socket.emit('vsm', {inputValue})          \r\n        setInputValue('')\r\n    }\r\n    \r\n    useEffect(async () => {\r\n        const result = await axios(\r\n            `${ENDPOINT}patient/${bed}`,\r\n        );\r\n        setPatient(result.data);\r\n    });\r\n    \r\n    useEffect(() => {\r\n        socket = io(ENDPOINT)  \r\n        console.log('stateChanged')  \r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        socket.on('message',(message)=>{\r\n            console.log( message )\r\n        })\r\n    },[])\r\n    return (\r\n        <div>\r\n            <div className=\"info-grid\">\r\n            <Grid container>\r\n                <Grid item xs={3}>\r\n                    <h1>Bed: {patient.bed}</h1>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <h2>Name: {patient.name}</h2>    \r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <h2>Age: {patient.age}</h2>    \r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <h2>Sex: {patient.sex}</h2>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <UpdatePatientForm name={patient.name} age={patient.age} sex={patient.sex} bed= {patient.bed}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <DeleteButton bed={bed}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <h2>Admission-date: {\"22/12/2020\"}</h2>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <h2>Sex: {patient.sex}</h2>\r\n                </Grid>\r\n            </Grid>\r\n            </div>\r\n            \r\n            \r\n            \r\n            \r\n            <div className=\"chart-container\">\r\n                <Chart/>            \r\n            </div>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" name=\"input\" value={inputValue} onChange={handleChange}/>\r\n            <input type=\"submit\" name=\"button\"/>\r\n            </form>\r\n\r\n            <h1>Data: {vsmData}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Patient\r\n","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\index.js",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\landingPage\\landingPage.component.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\sign-In-form\\signInForm.component.jsx",["68","69","70","71","72","73","74","75","76","77"],"import React, { useState } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useForm } from \"react-hook-form\";\r\nimport HomePageIMG from '../../assets/Login2.png'\r\nimport BioforgeLogo from '../../assets/BioforgeLogo1.png'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    img: {\r\n        [theme.breakpoints.up('xs')]: {\r\n            float: 'left',\r\n            maxWidth: '-webkit-fill-available',\r\n        },\r\n        [theme.breakpoints.up('sm')]: {\r\n            float: 'left',\r\n            maxWidth: '-webkit-fill-available',\r\n        },\r\n        [theme.breakpoints.up('md')]: {\r\n            float: 'left',\r\n            maxWidth: '-webkit-fill-available',\r\n        },\r\n        [theme.breakpoints.up('lg')]: {\r\n            float: 'left',\r\n            maxWidth: '-webkit-fill-available',\r\n        },\r\n        [theme.breakpoints.up('xl')]: {\r\n            float: 'left',\r\n            maxWidth: '-webkit-fill-available',\r\n        },\r\n    },\r\n    img1: {\r\n        [theme.breakpoints.up('xs')]: {\r\n            maxHeight: '141px',\r\n            maxWidth: '111px',\r\n        },\r\n        [theme.breakpoints.up('sm')]: {\r\n            maxHeight: '141px',\r\n            maxWidth: '111px',\r\n        },\r\n        [theme.breakpoints.up('md')]: {\r\n            maxHeight: '141px',\r\n            maxWidth: '111px',\r\n        },\r\n        [theme.breakpoints.up('lg')]: {\r\n            maxHeight: '141px',\r\n            maxWidth: '111px',\r\n            paddingLeft: '50px',\r\n            textAlign: 'left'\r\n        },\r\n        [theme.breakpoints.up('xl')]: {\r\n            paddingTop:'40px',\r\n            maxHeight: '141px',\r\n            maxWidth: '111px',\r\n            paddingLeft: '70px',\r\n            textAlign: 'left'\r\n\r\n        },\r\n    },\r\n\r\n    notchedOutline: {\r\n        borderWidth: \"1px\",\r\n        borderColor: \"#64D7EB\"\r\n    },\r\n    btn: {\r\n        [theme.breakpoints.up('lg')]: {\r\n            background: 'linear-gradient(45deg, #55D0B3 30%, #64D7EB 90%)',\r\n            border: 0,\r\n            borderRadius: 3,\r\n            boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n            color: 'white',\r\n            height: 40,\r\n            width: 140,\r\n            padding: '0 40px',\r\n            margin: '30px',\r\n            marginLeft: '310px',\r\n        },\r\n        [theme.breakpoints.up('xl')]: {\r\n            background: 'linear-gradient(45deg, #55D0B3 30%, #64D7EB 90%)',\r\n            border: 0,\r\n            borderRadius: 3,\r\n            boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n            color: 'white',\r\n            height: 40,\r\n            // width:40,\r\n            padding: '0 40px',\r\n            margin: '30px',\r\n            marginLeft: '421px',\r\n        }\r\n\r\n    },\r\n    text: {\r\n        paddingTop:'20px',\r\n        paddingLeft: '90px',\r\n        textAlign: 'left',\r\n\r\n    },\r\n    subtitleText: {\r\n        paddingLeft: '90px',\r\n        textAlign: 'left',\r\n        paddingTop: '30px',\r\n    },\r\n    textField: {\r\n        [theme.breakpoints.up('lg')]: {\r\n            marginTop: '30px',\r\n            marginLeft: '50px',\r\n            width: '469px'\r\n        },\r\n        [theme.breakpoints.up('xl')]: {\r\n            marginTop: '30px',\r\n            marginLeft: '90px',\r\n            width: '469px'\r\n\r\n        },\r\n\r\n    },\r\n    bottomText: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        bottom: '40px',\r\n        right: '100px',\r\n\r\n    },\r\n    bottomImg: {\r\n        textAlign: 'right',\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        right: 0,\r\n        maxHeight: '141px',\r\n        maxWidth: '111px',\r\n        // paddingLeft: '35px',\r\n        // textAlign: 'left',\r\n\r\n    }\r\n\r\n\r\n})\r\n\r\n)\r\nfunction SignInForm() {\r\n    const { register, handleSubmit, reset, errors } = useForm();\r\n\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n\r\n    const [values, setValues] = useState({\r\n        email: '',\r\n        password: '',\r\n    })\r\n\r\n    const handleChange = name => event => {\r\n        setValues({ ...values, [name]: event.target.value })\r\n    }\r\n\r\n    const clickSubmit = data => {\r\n        reset()\r\n        console.log(values)\r\n        const { username, password } = values\r\n        if (values.email === 'admin' && values.password === 'admin123') {\r\n            history.push(\"dashboard\")\r\n        }\r\n        else {\r\n            alert('Wrong Email/Password')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container>\r\n\r\n                <Grid item xs={12} md={12} lg={7} xl={7} >\r\n                    <span>\r\n                        <img className={classes.img} src={HomePageIMG} />\r\n                    </span>\r\n                </Grid>\r\n\r\n\r\n                <Grid item xs={12} md={12} lg={5} xl={5}>\r\n\r\n\r\n                    <span>\r\n                        <img className={classes.img1} src={BioforgeLogo} />\r\n                    </span>\r\n\r\n\r\n                    <Typography className={classes.text} style={{ paddingTop: '40px' }} variant=\"h4\">Welcome!</Typography>\r\n                    <Typography className={classes.text} variant=\"h4\">Lets get started.</Typography>\r\n                    <Typography className={classes.subtitleText} display=\"block\" variant=\"subtitle\"> Vital Signs Monitoring System</Typography>\r\n\r\n\r\n                    <TextField className={classes.textField} onChange={handleChange('email')} label=\"Email Id\" variant=\"outlined\" InputProps={{ classes: { notchedOutline: classes.notchedOutline } }} />\r\n                    <br></br>\r\n                    <TextField className={classes.textField} onChange={handleChange('password')} label=\"Password\" type=\"password\" variant=\"outlined\" InputProps={{ classes: { notchedOutline: classes.notchedOutline } }} />\r\n                    <br></br>\r\n\r\n                    <Button onClick={clickSubmit} className={classes.btn}>Log In</Button>\r\n                    <br></br>\r\n                   \r\n                    <Typography display=\"block\" className={classes.bottomText} variant=\"subtitle\"> Powered By:</Typography>\r\n                    <span>\r\n                        <img  className={classes.bottomImg} src={BioforgeLogo} />\r\n                    </span>\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n\r\n\r\n            {/* <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <input name=\"username\" type=\"text\" ref={register} />\r\n                    {errors.name && <span>Please insert the correct password</span>}\r\n                    <br></br>\r\n                    <input name=\"password\" type=\"password\" ref={register({ required: true })} />\r\n                    {errors.password && <span>Please insert the correct password</span>}\r\n                    <br></br>\r\n                    <input type=\"submit\" />\r\n                </form> */}\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignInForm\r\n","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\card\\card.component.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\cards.component.jsx",["78"],"D:\\Work\\BioForge\\vsm-front-end\\src\\App.js",[],["79","80"],"D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\dashboard\\dashboard.js",["81"],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\NavBar\\Navbar.js",["82","83","84"],"import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n   \r\n\r\n}))\r\n\r\nexport default function ButtonAppBar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\" style={{ background: 'linear-gradient(45deg, #55D0B3 30%, #64D7EB 90%)' }}>\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        {/* <MenuIcon /> */}\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title} >\r\n                        VSM Dashboard\r\n                    </Typography>\r\n                    {/* <Button color=\"inherit\">Login</Button> */}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    );\r\n}","D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\addPatientForm\\addPatientForm.component.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\deleteButton\\deleteButton.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\updatePatientForm\\updatePatientForm.component.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\reportWebVitals.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":19,"column":21,"nodeType":"91","messageId":"92","endLine":19,"endColumn":31},{"ruleId":"93","severity":1,"message":"94","line":33,"column":5,"nodeType":"91","endLine":33,"endColumn":14,"suggestions":"95"},{"ruleId":"93","severity":1,"message":"96","line":33,"column":15,"nodeType":"97","endLine":38,"endColumn":6},{"ruleId":"89","severity":1,"message":"98","line":6,"column":10,"nodeType":"91","messageId":"92","endLine":6,"endColumn":22},{"ruleId":"89","severity":1,"message":"99","line":6,"column":36,"nodeType":"91","messageId":"92","endLine":6,"endColumn":41},{"ruleId":"89","severity":1,"message":"100","line":148,"column":13,"nodeType":"91","messageId":"92","endLine":148,"endColumn":21},{"ruleId":"89","severity":1,"message":"101","line":148,"column":23,"nodeType":"91","messageId":"92","endLine":148,"endColumn":35},{"ruleId":"89","severity":1,"message":"102","line":148,"column":44,"nodeType":"91","messageId":"92","endLine":148,"endColumn":50},{"ruleId":"89","severity":1,"message":"103","line":165,"column":17,"nodeType":"91","messageId":"92","endLine":165,"endColumn":25},{"ruleId":"89","severity":1,"message":"104","line":165,"column":27,"nodeType":"91","messageId":"92","endLine":165,"endColumn":35},{"ruleId":"105","severity":1,"message":"106","line":180,"column":25,"nodeType":"107","endLine":180,"endColumn":74},{"ruleId":"105","severity":1,"message":"106","line":189,"column":25,"nodeType":"107","endLine":189,"endColumn":76},{"ruleId":"105","severity":1,"message":"106","line":208,"column":25,"nodeType":"107","endLine":208,"endColumn":82},{"ruleId":"89","severity":1,"message":"108","line":10,"column":9,"nodeType":"91","messageId":"92","endLine":10,"endColumn":17},{"ruleId":"85","replacedBy":"109"},{"ruleId":"87","replacedBy":"110"},{"ruleId":"89","severity":1,"message":"111","line":1,"column":10,"nodeType":"91","messageId":"92","endLine":1,"endColumn":14},{"ruleId":"89","severity":1,"message":"98","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":22},{"ruleId":"89","severity":1,"message":"99","line":2,"column":36,"nodeType":"91","messageId":"92","endLine":2,"endColumn":41},{"ruleId":"89","severity":1,"message":"112","line":6,"column":8,"nodeType":"91","messageId":"92","endLine":6,"endColumn":14},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'setVsmData' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setPatient'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [bed] as a second argument to the useEffect Hook.",["115"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'createStyles' is defined but never used.","'Theme' is defined but never used.","'register' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'errors' is assigned a value but never used.","'username' is assigned a value but never used.","'password' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'onChange' is assigned a value but never used.",["113"],["114"],"'Card' is defined but never used.","'Button' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},"Add dependencies array: [bed]",{"range":"118","text":"119"},[1136,1136],", [bed]"]