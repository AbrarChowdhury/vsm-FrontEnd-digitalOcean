[{"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\patient\\patient.component.jsx":"1","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\deleteButton\\deleteButton.jsx":"2"},{"size":6205,"mtime":1610519242789,"results":"3","hashOfConfig":"4"},{"size":381,"mtime":1610342729174,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1cxrmgn",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\patient\\patient.component.jsx",["11","12","13","14","15","16","17","18","19","20","21"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport UpdatePatientForm from './updatePatientForm.component'\r\nimport io from \"socket.io-client\";\r\nimport DeleteButton from \"../deleteButton/deleteButton\"\r\nimport './patient.styles.scss'\r\nimport Chart from '../chart/chart.component'\r\nimport axios from 'axios'\r\nimport Navbar from '../NavBar/Navbar'\r\nimport { Typography } from '@material-ui/core'\r\nimport Icon from '@material-ui/core/Icon'\r\n\r\nimport Button from '@material-ui/core/Button'\r\nimport Edit from '@material-ui/icons/Edit'\r\n\r\nconst ENDPOINT = 'http://localhost:5000/';\r\nlet socket;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n\r\n    },\r\n    chartBox: {\r\n        margin: '20px 20px 0px 20px',\r\n        // paddingBottom: '40px',\r\n        background: '#0A081A',\r\n        maxHeight: '784px'\r\n    },\r\n    textHeader: {\r\n        color: '#64D7EB'\r\n    },\r\n    textHeader1: {\r\n        margin: '0px 80px 00px 00px',\r\n\r\n    },\r\n    textBody: {\r\n        color: '#FFFFFF'\r\n    },\r\n    chartText: {\r\n        // marginBottom:'50px',\r\n        padding: '40px'\r\n    },\r\n    chart: {\r\n        padding: '20px 40px 40px 40px'\r\n    }\r\n\r\n\r\n\r\n})\r\n\r\n)\r\n\r\nfunction Patient() {\r\n    const classes = useStyles()\r\n    let { bed } = useParams();\r\n    const [patient, setPatient] = useState({})\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [vsmData, setVsmData] = useState('')\r\n\r\n\r\n    const handleChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        console.log(\"the value\", inputValue)\r\n        socket.emit('vsm', { inputValue })\r\n        setInputValue('')\r\n    }\r\n\r\n    useEffect(async () => {\r\n        const result = await axios(\r\n            `${ENDPOINT}patient/${bed}`,\r\n        );\r\n        setPatient(result.data);\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        socket = io(ENDPOINT)\r\n        console.log('stateChanged')\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('message', (message) => {\r\n            console.log(message)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.root}>\r\n                <Navbar></Navbar>\r\n\r\n\r\n                <div className={classes.chartBox}>\r\n\r\n                    <div className={classes.chartText}>\r\n                        <Grid container xl={24}>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Bed No: </Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{patient.bed}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Patient Name:</Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{patient.name}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Age:</Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{patient.age}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Sex:</Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{patient.sex}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Temp:</Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{patient.sex}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Admission-date:</Typography>\r\n                                <Typography variant=\"h6\" className={classes.textBody}>{\"22/11/2020\"}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1} className={classes.textHeader1}>\r\n                                <Typography variant=\"h6\" className={classes.textHeader}>Diagnosis:</Typography>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                                <Button variant=\"contained\" color=\"#FFFFFF\" className={classes.button} endIcon={<Edit/>}><Typography>Edit</Typography> </Button>\r\n\r\n                            </Grid>\r\n\r\n                            {/* <Grid item xs={6}>\r\n                            <UpdatePatientForm name={patient.name} age={patient.age} sex={patient.sex} bed={patient.bed} />\r\n                        </Grid> */}\r\n                            {/* <Grid item xs={6}>\r\n                            <DeleteButton bed={bed} />\r\n                        </Grid> */}\r\n                            {/* <Grid item xs={6}>\r\n                            <Typography variant=\"h5\" className={classes.text}>Admission-date: {\"22/12/2020\"}</Typography>\r\n                        </Grid> */}\r\n\r\n                        </Grid>\r\n                    </div>\r\n\r\n                    <div className={classes.chart}>\r\n                        <Chart />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* <form onSubmit={handleSubmit}>\r\n                    <input type=\"text\" name=\"input\" value={inputValue} onChange={handleChange} />\r\n                    <input type=\"submit\" name=\"button\" />\r\n                </form> */}\r\n\r\n                {/* <h1>Data: {vsmData}</h1> */}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Patient\r\n","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\deleteButton\\deleteButton.jsx",[],{"ruleId":"22","severity":1,"message":"23","line":4,"column":10,"nodeType":"24","messageId":"25","endLine":4,"endColumn":22},{"ruleId":"22","severity":1,"message":"26","line":4,"column":36,"nodeType":"24","messageId":"25","endLine":4,"endColumn":41},{"ruleId":"22","severity":1,"message":"27","line":5,"column":8,"nodeType":"24","messageId":"25","endLine":5,"endColumn":25},{"ruleId":"22","severity":1,"message":"28","line":7,"column":8,"nodeType":"24","messageId":"25","endLine":7,"endColumn":20},{"ruleId":"22","severity":1,"message":"29","line":13,"column":8,"nodeType":"24","messageId":"25","endLine":13,"endColumn":12},{"ruleId":"22","severity":1,"message":"30","line":61,"column":12,"nodeType":"24","messageId":"25","endLine":61,"endColumn":19},{"ruleId":"22","severity":1,"message":"31","line":61,"column":21,"nodeType":"24","messageId":"25","endLine":61,"endColumn":31},{"ruleId":"22","severity":1,"message":"32","line":64,"column":11,"nodeType":"24","messageId":"25","endLine":64,"endColumn":23},{"ruleId":"22","severity":1,"message":"33","line":68,"column":11,"nodeType":"24","messageId":"25","endLine":68,"endColumn":23},{"ruleId":"34","severity":1,"message":"35","line":75,"column":5,"nodeType":"24","endLine":75,"endColumn":14,"suggestions":"36"},{"ruleId":"34","severity":1,"message":"37","line":75,"column":15,"nodeType":"38","endLine":81,"endColumn":6},"no-unused-vars","'createStyles' is defined but never used.","Identifier","unusedVar","'Theme' is defined but never used.","'UpdatePatientForm' is defined but never used.","'DeleteButton' is defined but never used.","'Icon' is defined but never used.","'vsmData' is assigned a value but never used.","'setVsmData' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setPatient'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [bed] as a second argument to the useEffect Hook.",["39"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",{"desc":"40","fix":"41"},"Add dependencies array: [bed]",{"range":"42","text":"43"},[2020,2020],", [bed]"]