[{"D:\\Work\\BioForge\\vsm-front-end\\src\\index.js":"1","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\patient\\patient.component.jsx":"2","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\index.js":"3","D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\landingPage\\landingPage.component.jsx":"4","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\sign-In-form\\signInForm.component.jsx":"5","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\card\\card.component.jsx":"6","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\cards.component.jsx":"7","D:\\Work\\BioForge\\vsm-front-end\\src\\App.js":"8","D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\dashboard\\dashboard.js":"9","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\NavBar\\Navbar.js":"10","D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\addPatientForm\\addPatientForm.component.jsx":"11","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\deleteButton\\deleteButton.jsx":"12","D:\\Work\\BioForge\\vsm-front-end\\src\\components\\updatePatientForm\\updatePatientForm.component.jsx":"13","D:\\Work\\BioForge\\vsm-front-end\\src\\reportWebVitals.js":"14"},{"size":517,"mtime":1610342729179,"results":"15","hashOfConfig":"16"},{"size":2945,"mtime":1610342729175,"results":"17","hashOfConfig":"16"},{"size":209,"mtime":1610344097957,"results":"18","hashOfConfig":"16"},{"size":241,"mtime":1610346468712,"results":"19","hashOfConfig":"16"},{"size":7073,"mtime":1610374505546,"results":"20","hashOfConfig":"16"},{"size":1433,"mtime":1610376346944,"results":"21","hashOfConfig":"16"},{"size":1721,"mtime":1610376418368,"results":"22","hashOfConfig":"16"},{"size":885,"mtime":1610344643761,"results":"23","hashOfConfig":"16"},{"size":381,"mtime":1610345200628,"results":"24","hashOfConfig":"16"},{"size":1357,"mtime":1610373945441,"results":"25","hashOfConfig":"16"},{"size":1420,"mtime":1610342729183,"results":"26","hashOfConfig":"16"},{"size":381,"mtime":1610342729174,"results":"27","hashOfConfig":"16"},{"size":1278,"mtime":1610342729178,"results":"28","hashOfConfig":"16"},{"size":375,"mtime":1610342729185,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1cxrmgn",{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"D:\\Work\\BioForge\\vsm-front-end\\src\\index.js",[],["63","64"],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\patient\\patient.component.jsx",["65","66","67"],"import React, {useState, useEffect} from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport Grid from '@material-ui/core/Grid'\r\nimport UpdatePatientForm from '../updatePatientForm/updatePatientForm.component'\r\nimport io from \"socket.io-client\";\r\nimport DeleteButton from \"../deleteButton/deleteButton\"\r\nimport './patient.styles.scss'\r\nimport Chart from '../chart/chart.component'\r\nimport axios from 'axios'\r\n\r\nconst ENDPOINT = 'http://localhost:5000/';\r\nlet socket;\r\n\r\n\r\nfunction Patient() {\r\n    let { bed } = useParams();\r\n    const [patient, setPatient]=useState({})\r\n    const [inputValue, setInputValue] = useState('')\r\n    const [vsmData, setVsmData] = useState('')\r\n    \r\n    \r\n    const handleChange = (e)=>{\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault() \r\n        console.log(\"the value\",inputValue)\r\n        socket.emit('vsm', {inputValue})          \r\n        setInputValue('')\r\n    }\r\n    \r\n    useEffect(async () => {\r\n        const result = await axios(\r\n            `${ENDPOINT}patient/${bed}`,\r\n        );\r\n        setPatient(result.data);\r\n    });\r\n    \r\n    useEffect(() => {\r\n        socket = io(ENDPOINT)  \r\n        console.log('stateChanged')  \r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        socket.on('message',(message)=>{\r\n            console.log( message )\r\n        })\r\n    },[])\r\n    return (\r\n        <div>\r\n            <div className=\"info-grid\">\r\n            <Grid container>\r\n                <Grid item xs={3}>\r\n                    <h1>Bed: {patient.bed}</h1>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <h2>Name: {patient.name}</h2>    \r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <h2>Age: {patient.age}</h2>    \r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <h2>Sex: {patient.sex}</h2>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <UpdatePatientForm name={patient.name} age={patient.age} sex={patient.sex} bed= {patient.bed}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <DeleteButton bed={bed}/>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <h2>Admission-date: {\"22/12/2020\"}</h2>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <h2>Sex: {patient.sex}</h2>\r\n                </Grid>\r\n            </Grid>\r\n            </div>\r\n            \r\n            \r\n            \r\n            \r\n            <div className=\"chart-container\">\r\n                <Chart/>            \r\n            </div>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" name=\"input\" value={inputValue} onChange={handleChange}/>\r\n            <input type=\"submit\" name=\"button\"/>\r\n            </form>\r\n\r\n            <h1>Data: {vsmData}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Patient\r\n",["68","69"],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\index.js",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\landingPage\\landingPage.component.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\sign-In-form\\signInForm.component.jsx",["70","71","72","73","74","75","76","77","78","79"],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\card\\card.component.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\cards\\cards.component.jsx",["80","81","82","83","84","85","86"],"D:\\Work\\BioForge\\vsm-front-end\\src\\App.js",[],["87","88"],"D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\dashboard\\dashboard.js",["89"],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\NavBar\\Navbar.js",["90","91","92"],"D:\\Work\\BioForge\\vsm-front-end\\src\\pages\\addPatientForm\\addPatientForm.component.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\deleteButton\\deleteButton.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\components\\updatePatientForm\\updatePatientForm.component.jsx",[],"D:\\Work\\BioForge\\vsm-front-end\\src\\reportWebVitals.js",[],["93","94"],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":19,"column":21,"nodeType":"101","messageId":"102","endLine":19,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":33,"column":5,"nodeType":"101","endLine":33,"endColumn":14,"suggestions":"105"},{"ruleId":"103","severity":1,"message":"106","line":33,"column":15,"nodeType":"107","endLine":38,"endColumn":6},{"ruleId":"95","replacedBy":"108"},{"ruleId":"97","replacedBy":"109"},{"ruleId":"99","severity":1,"message":"110","line":6,"column":10,"nodeType":"101","messageId":"102","endLine":6,"endColumn":22},{"ruleId":"99","severity":1,"message":"111","line":6,"column":36,"nodeType":"101","messageId":"102","endLine":6,"endColumn":41},{"ruleId":"99","severity":1,"message":"112","line":149,"column":13,"nodeType":"101","messageId":"102","endLine":149,"endColumn":21},{"ruleId":"99","severity":1,"message":"113","line":149,"column":23,"nodeType":"101","messageId":"102","endLine":149,"endColumn":35},{"ruleId":"99","severity":1,"message":"114","line":149,"column":44,"nodeType":"101","messageId":"102","endLine":149,"endColumn":50},{"ruleId":"99","severity":1,"message":"115","line":166,"column":17,"nodeType":"101","messageId":"102","endLine":166,"endColumn":25},{"ruleId":"99","severity":1,"message":"116","line":166,"column":27,"nodeType":"101","messageId":"102","endLine":166,"endColumn":35},{"ruleId":"117","severity":1,"message":"118","line":181,"column":25,"nodeType":"119","endLine":181,"endColumn":74},{"ruleId":"117","severity":1,"message":"118","line":190,"column":25,"nodeType":"119","endLine":190,"endColumn":76},{"ruleId":"117","severity":1,"message":"118","line":209,"column":25,"nodeType":"119","endLine":209,"endColumn":82},{"ruleId":"99","severity":1,"message":"120","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":14},{"ruleId":"99","severity":1,"message":"110","line":3,"column":10,"nodeType":"101","messageId":"102","endLine":3,"endColumn":22},{"ruleId":"99","severity":1,"message":"111","line":3,"column":36,"nodeType":"101","messageId":"102","endLine":3,"endColumn":41},{"ruleId":"99","severity":1,"message":"121","line":25,"column":9,"nodeType":"101","messageId":"102","endLine":25,"endColumn":17},{"ruleId":"122","severity":1,"message":"123","line":42,"column":47,"nodeType":"107","messageId":"124","endLine":42,"endColumn":49},{"ruleId":"122","severity":1,"message":"123","line":44,"column":32,"nodeType":"107","messageId":"124","endLine":44,"endColumn":34},{"ruleId":"125","severity":1,"message":"126","line":46,"column":32,"nodeType":"127","messageId":"128","endLine":46,"endColumn":34},{"ruleId":"95","replacedBy":"129"},{"ruleId":"97","replacedBy":"130"},{"ruleId":"99","severity":1,"message":"131","line":1,"column":10,"nodeType":"101","messageId":"102","endLine":1,"endColumn":14},{"ruleId":"99","severity":1,"message":"110","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":22},{"ruleId":"99","severity":1,"message":"111","line":2,"column":36,"nodeType":"101","messageId":"102","endLine":2,"endColumn":41},{"ruleId":"99","severity":1,"message":"132","line":6,"column":8,"nodeType":"101","messageId":"102","endLine":6,"endColumn":14},{"ruleId":"95","replacedBy":"133"},{"ruleId":"97","replacedBy":"134"},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'setVsmData' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setPatient'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [bed] as a second argument to the useEffect Hook.",["137"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression",["135"],["136"],"'createStyles' is defined but never used.","'Theme' is defined but never used.","'register' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'errors' is assigned a value but never used.","'username' is assigned a value but never used.","'password' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Link' is defined but never used.","'onChange' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["135"],["136"],"'Card' is defined but never used.","'Button' is defined but never used.",["135"],["136"],"no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},"Add dependencies array: [bed]",{"range":"140","text":"141"},[1136,1136],", [bed]"]